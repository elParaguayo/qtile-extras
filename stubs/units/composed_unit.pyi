from typing import Any
from units.abstract import AbstractUnit as AbstractUnit
from units.compatibility import compatible as compatible

def unbox(numer, denom, multiplier): ...
def cancel(numer, denom): ...
def squeeze(numer, denom): ...

class ComposedUnit(AbstractUnit):
    def __new__(cls, numer, denom, multiplier: int = ...): ...
    orig_numer: Any
    orig_denom: Any
    orig_multiplier: Any
    def __init__(self, numer, denom, multiplier: int = ...) -> None: ...
    def __reduce__(self): ...
    def str_includes_multiplier(self): ...
    def canonical(self): ...
    def squeeze(self): ...
    def __mul__(self, other): ...
    def invert(self): ...
    def __truediv__(self, other): ...
    __div__: Any
    def __pow__(self, exponent): ...
