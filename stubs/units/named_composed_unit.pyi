from typing import Any
from units.abstract import AbstractUnit as AbstractUnit
from units.composed_unit import ComposedUnit as ComposedUnit
from units.registry import REGISTRY as REGISTRY

class NamedComposedUnit(AbstractUnit):
    def get_name(self): ...
    name: Any
    def get_composed_unit(self): ...
    composed_unit: Any
    def __new__(cls, name, composed_unit, is_si: bool = ...): ...
    def __init__(self, name, composed_unit, is_si: bool = ...) -> None: ...
    def __reduce__(self): ...
    def invert(self): ...
    def canonical(self): ...
    def squeeze(self): ...
    def __mul__(self, other): ...
    def __truediv__(self, other): ...
    __div__: Any
    def str_includes_multiplier(self): ...
    def __eq__(self, other): ...
    def __pow__(self, exponent): ...
