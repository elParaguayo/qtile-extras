from stravalib import exc as exc, model as model, unithelper as unithelper
from stravalib.protocol import ApiV3 as ApiV3
from stravalib.util import limiter as limiter
from typing import Any

class Client:
    log: Any
    protocol: Any
    def __init__(self, access_token: Any | None = ..., rate_limit_requests: bool = ..., rate_limiter: Any | None = ..., requests_session: Any | None = ...) -> None: ...
    @property
    def access_token(self): ...
    @access_token.setter
    def access_token(self, v) -> None: ...
    def authorization_url(self, client_id, redirect_uri, approval_prompt: str = ..., scope: Any | None = ..., state: Any | None = ...): ...
    def exchange_code_for_token(self, client_id, client_secret, code): ...
    def refresh_access_token(self, client_id, client_secret, refresh_token): ...
    def deauthorize(self) -> None: ...
    def get_activities(self, before: Any | None = ..., after: Any | None = ..., limit: Any | None = ...): ...
    def get_athlete(self, athlete_id: Any | None = ...): ...
    def get_athlete_friends(self, athlete_id: Any | None = ..., limit: Any | None = ...): ...
    def update_athlete(self, city: Any | None = ..., state: Any | None = ..., country: Any | None = ..., sex: Any | None = ..., weight: Any | None = ...): ...
    def get_athlete_followers(self, athlete_id: Any | None = ..., limit: Any | None = ...): ...
    def get_both_following(self, athlete_id, limit: Any | None = ...) -> None: ...
    def get_athlete_koms(self, athlete_id, limit: Any | None = ...): ...
    def get_athlete_stats(self, athlete_id: Any | None = ...): ...
    def get_athlete_clubs(self): ...
    def join_club(self, club_id) -> None: ...
    def leave_club(self, club_id) -> None: ...
    def get_club(self, club_id): ...
    def get_club_members(self, club_id, limit: Any | None = ...): ...
    def get_club_activities(self, club_id, limit: Any | None = ...): ...
    def get_activity(self, activity_id, include_all_efforts: bool = ...): ...
    def get_friend_activities(self, limit: Any | None = ...) -> None: ...
    def create_activity(self, name, activity_type, start_date_local, elapsed_time, description: Any | None = ..., distance: Any | None = ...): ...
    def update_activity(self, activity_id, name: Any | None = ..., activity_type: Any | None = ..., private: Any | None = ..., commute: Any | None = ..., trainer: Any | None = ..., gear_id: Any | None = ..., description: Any | None = ..., device_name: Any | None = ...): ...
    def upload_activity(self, activity_file, data_type, name: Any | None = ..., description: Any | None = ..., activity_type: Any | None = ..., private: Any | None = ..., external_id: Any | None = ...): ...
    def delete_activity(self, activity_id) -> None: ...
    def get_activity_zones(self, activity_id): ...
    def get_activity_comments(self, activity_id, markdown: bool = ..., limit: Any | None = ...): ...
    def get_activity_kudos(self, activity_id, limit: Any | None = ...): ...
    def get_activity_photos(self, activity_id, size: Any | None = ..., only_instagram: bool = ...): ...
    def get_activity_laps(self, activity_id): ...
    def get_related_activities(self, activity_id, limit: Any | None = ...) -> None: ...
    def get_gear(self, gear_id): ...
    def get_segment_effort(self, effort_id): ...
    def get_segment(self, segment_id): ...
    def get_starred_segments(self, limit: Any | None = ...): ...
    def get_athlete_starred_segments(self, athlete_id, limit: Any | None = ...): ...
    def get_segment_leaderboard(self, segment_id, gender: Any | None = ..., age_group: Any | None = ..., weight_class: Any | None = ..., following: Any | None = ..., club_id: Any | None = ..., timeframe: Any | None = ..., top_results_limit: Any | None = ..., page: Any | None = ..., context_entries: Any | None = ...): ...
    def get_segment_efforts(self, segment_id, athlete_id: Any | None = ..., start_date_local: Any | None = ..., end_date_local: Any | None = ..., limit: Any | None = ...): ...
    def explore_segments(self, bounds, activity_type: Any | None = ..., min_cat: Any | None = ..., max_cat: Any | None = ...): ...
    def get_activity_streams(self, activity_id, types: Any | None = ..., resolution: Any | None = ..., series_type: Any | None = ...): ...
    def get_effort_streams(self, effort_id, types: Any | None = ..., resolution: Any | None = ..., series_type: Any | None = ...): ...
    def get_segment_streams(self, segment_id, types: Any | None = ..., resolution: Any | None = ..., series_type: Any | None = ...): ...
    def get_running_race(self, race_id): ...
    def get_running_races(self, year: Any | None = ...): ...
    def get_routes(self, athlete_id: Any | None = ..., limit: Any | None = ...): ...
    def get_route(self, route_id): ...
    def get_route_streams(self, route_id): ...
    def create_subscription(self, client_id, client_secret, callback_url, verify_token=...): ...
    def handle_subscription_callback(self, raw, verify_token=...): ...
    def handle_subscription_update(self, raw): ...
    def list_subscriptions(self, client_id, client_secret): ...
    def delete_subscription(self, subscription_id, client_id, client_secret) -> None: ...

class BatchedResultsIterator:
    default_per_page: int
    log: Any
    entity: Any
    bind_client: Any
    result_fetcher: Any
    limit: Any
    per_page: Any
    def __init__(self, entity, result_fetcher, bind_client: Any | None = ..., limit: Any | None = ..., per_page: Any | None = ...) -> None: ...
    def reset(self) -> None: ...
    def __iter__(self): ...
    def __next__(self): ...
    def next(self): ...

class ActivityUploader:
    client: Any
    response: Any
    def __init__(self, client, response, raise_exc: bool = ...) -> None: ...
    upload_id: Any
    external_id: Any
    activity_id: Any
    status: Any
    error: Any
    def update_from_response(self, response, raise_exc: bool = ...) -> None: ...
    @property
    def is_processing(self): ...
    @property
    def is_error(self): ...
    @property
    def is_complete(self): ...
    def raise_for_error(self) -> None: ...
    def poll(self) -> None: ...
    def wait(self, timeout: Any | None = ..., poll_interval: float = ...): ...
